#!/usr/bin/env ruby
#./monitor_worker_host user@host god_watch_name
require 'timeout'

def host_up?(user_at_host)
  begin
    Timeout.timeout(8) {
      !!(`ssh #{user_at_host} echo "im_really_running"` =~ /im_really_running/)
    }
  rescue Timeout::Error
    false
  end
end

def worker_up?(god_watch_name)
  !!(`sudo god status #{god_watch_name}` =~ /#{god_watch_name}: up/)
end

user_at_host, god_watch_name = *ARGV
sleep_time = 10

puts "Starting at #{Time.now}"
die_at = Time.now + (60 * 15)
loop do
  host_up = host_up?(user_at_host)
  worker_up = worker_up?(god_watch_name)

  puts "#{Time.now}: host_up: #{host_up.inspect} worker_up: #{worker_up.inspect}"

  begin
    if host_up && !worker_up
      puts "Starting..."
      puts `sudo god start #{god_watch_name}`
    elsif !host_up && worker_up
      puts "Stopping..."
      puts `sudo god stop #{god_watch_name}`
    end
  rescue Errno::EPIPE => e
    puts "ERROR:"
    puts e.message
    puts e.backtrace.inspect
  end

  #Die and let god restart us, as a super hacky hack for our zombie ssh processes
  if Time.now >= die_at
    puts "Kamikaze-ing zombies at #{Time.now}, exiting..."
    exit 1
  end

  sleep sleep_time
end